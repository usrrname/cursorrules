---
description: Standards for creating and adding new Cursor rules to a project or repository.
globs: *.mdc
alwaysApply: true
---
# Creating and updating cursor rules

<rule>
  name: create-rule
  description: Standards for creating and adding new Cursor rules
  alwaysApply: {true or false}
  filters:
    # Match any .mdc files
    - type: file_extension
      pattern: "\\.mdc$"
    # Match files that look like Cursor rules
    - type: content
      pattern: "(?s)<rule>.*?</rule>"
    # Find example(s) in Cursor rules to enhance precision of implementation
    - type: content
      pattern: "(?s)<examples?>(.*?)</examples?>"
    # Match file creation events
    - type: event
      pattern: "file_create"
    - type: validate
      conditions:
      - pattern: "^[0-9]{4}-[a-z0-9]+(?:-[a-z0-9]+)*\\.mdc$"
        message: "Filenames of cursor rules should follow the format `####-rule-name.mdc` where # stands in for numbers."

  metadata:
    priority: high
    version: 1.0
</rule>

## Critical Rules

- Any cursor rule file must contain a concise list of rules 
- Any cursor rule file should also state conditions that violate the rules
- Every rule should have a test section on the rule file
  - Every test should elaborate on expected outcomes for potential scenarios and use cases
- Front matter rule types: (See )
    - The front matter section must always start the file and include all 3 fields, even if the field value will be blank - the types are:
      - Manual Rule: if a Manual rule is requested, description and globs MUST be blank and alwaysApply: false and filename ends with -manual.mdc.
      - Auto Rule: IF a rule is requested that should apply always to certain glob patterns (example all typescript files or all markdown files) - description must be blank, and alwaysApply: false and filename ends with -auto.mdc.
      - Always Rule: Global Rule applies to every chat and cmd/ctrl-k - description and globs blank, and alwaysApply: true  and filename ends with -always.mdc.
      - Agent Select Rule: The rule does not need to be loaded into every chat thread, it serves a specific purpose. The description MUST provide comprehensive context about when to apply the rule, including scenarios like code changes, architecture decisions, bug fixes, or new file creation. Globs blank, and alwaysApply:false and filename ends with -agent.mdc

### Folders

All folders within PROJECT_ROOT/.cursor/rules should follow the following conventions:

- .cursor/rules/core
- .cursor/rules/test  - rules about testing
- .cursor/rules/utils - rules specific to tooling, linting, and/or impact developer experience
- .cursor/rules/proj - project rules specific to a tech stack or programming language
  - for example:
    - `.cursor/rules/proj/mern` if we are using the MERN stack (Mongo, Express, React, Node)
    - `.cursor/rules/proj/ts` if the rule is just for typescript standards
- create new folders under .cursor/rules/ pertaining to 

## Glob Pattern Examples

Glob patterns for different rule types:
- Core standards: .cursor/rules/**/*.mdc
- Language rules: *.cs, *.cpp
- Testing standards: *.test.ts, *.test.js, *test.spec.ts
- UI components: src/components/**/*.tsx, src/components/*.vue 
- Documentation: docs/**/*.md, *.mdx
- Configuration files: *.config.js, *.config.ts
- CI workflows: .github/**/*.yml, .Dockerfile, docker-compose.yml
- Build artifacts: dist/**/*, out/**/*
- Multiple extensions: *.js, *.ts, *.tsx
- Multiple patterns: dist/**/*.*, docs/**/*.md, *test*.*

### Filenaming convention:
  - Always use .mdc extension
  - Make names descriptive of the rule's purpose
  - Use either kebab-case or understores within filenames. Do not allow use both within the same repository.
  - Rule filenames should follow the format `####-rule-name.mdc` where # stands in for numbers. 

  Examples of acceptable rule filenames:
  <example> 
    0000-rule-generation.mdc
    0001-rule-location.mdc
    0002-app-architecture.mdc
  </example>
  
  Examples of invalid rule names: 
  <example type="invalid">
    AbCdDruleName.mdc
    added-a-rule.mdc
    something-cool.mdc
  </example>

### Rule Content 
  - Every rule starts with YAML frontmatter
  - The globs property can be empty or specify the constrained filename, type or extension
    ```mdc
      ---
      description: Your rule description
      globs: pattern1,pattern2
      alwaysApply: {true|false}
      ---
    ```
  - Rules use XML-style `<rule></rule>` and `<example></example>` tags
  - Include clear examples that account for specific conventions of the language or framework the rule applies to. 
  - If there is a contradiction between rules between files or within the same file, highlight them. 
  - Add relevant metadata on priority and version

  ```mdc
  ---
  description: Your rule description
  globs: pattern1,pattern2
  ---

  # Rule Title

  {description or summary about purpose of the rule}

  ## Critical Rules

  - Important rule that agent shall not violate
  - Another important rule that agent shall not violate

  <rule>
  name: my-rule-name
  description: rule description

  filters:
  - type: file_extension
    pattern: "\\.ext$"
  actions:
  - type: {suggest|reject|transform|lint|format|validate|alert|document|generate}
  ...
  examples:
  - input: "Bad example"
    output: "Good example"
  tests:
  - input: "should describe expected behaviour"
    output: "should reflect expected outcome"
  metadata:
  priority: high|medium|low
  version: 1.0
  </rule>
  ```

test:
  - input: |
      # Bad example: Insufficient context with vague requirements and no examples
       <rule>
        name: calculate_total
        description: get the total number of things
      </rule>
      # Good: Clear instructions with examples
      <rule>
        name: sum_of_numbers
        description: given a series of numbers, returns the total of all numbers added together
      </rule>
      examples:
       - input: |
        function calculateTotal(price, tax) {
            return price * (1 + tax);
        }
        output: |
        /**
        * @description Calculates total price including tax
        * @param {number} price - Base price before tax
        * @param {number} tax - Tax rate as decimal
        * @returns {number} Final price including tax
        */
        function calculateTotal(price, tax) {
            return price * (1 + tax);
        }
  - input: |
      # Bad: Overly broad and non-specific to language
      ---
      description: Code standards
      globs: *
      ---
      <rule>
      name: all_code
      description: Enforce all code standards
      filters:
        - type: file_extension
          pattern: ".*"
      actions:
        - type: suggest
          message: "Write better code"
      </rule>
      # Good: Specifies details and conventions pertaining to language
      ---
      description: JavaScript Function Documentation Standards
      globs: *.{js,ts,jsx,tsx}
      ---
      <rule>
      name: function_documentation
      description: Enforces consistent function documentation using JSDoc
      filters:
        - type: content
          pattern: "function\\s+\\w+\\s*\\([^)]*\\)\\s*{(?![\\s\\S]*\\*)"
      actions:
        - type: suggest
          message: |
            Add JSDoc documentation for functions. Example:
            /**
            * @description Brief description of function
            * @param {type} paramName - Parameter description
            * @returns {type} Description of return value
            */
  - input: |
      # Bad: Missing frontmatter
      <rule>
      name: bad_rule
      </rule>

      # Good: Properly formatted rule with all frontmatter properties populated
      ---
      description: Example rule
      globs: *.ts
      autoA
      ---

      # TypeScript Standards

      <rule>
      name: typescript_standards
      description: Standards for TypeScript files
      </rule>

      filters:
        - type: file_extension
          pattern: "\\.ts$"
      actions:
        - type: suggest
          message: "Follow TypeScript best practices that adhere to its latest stable version."
    
      # Good: Thorough well-defined examples of patterns with examples
      ---
      description: TypeScript Type Definition Standards
      globs: *.ts
      ---
      <rule>
      name: typescript_types
      description: Enforces proper type definitions and usage in TypeScript
      filters:
        - type: content
          pattern: "(any|Object|Function)(?!\\s*:.*\\s*=>)"
      actions:
        - type: suggest
          message: |
            Avoid using generic types like 'any', 'Object', or 'Function'.
            Instead:
            - Use specific interfaces or type definitions
            - Define proper function signatures
            - Utilize built-in utility types when appropriate
      examples:
        - input: |
            function process(data: any): Object {
                return { result: data };
            }
          output: |
            interface ProcessInput {
                id: string;
                value: number;
            }
            
            interface ProcessOutput {
                result: ProcessInput;
                timestamp: Date;
            }
            
            function process(data: ProcessInput): ProcessOutput {
                return { 
                    result: data,
                    timestamp: new Date()
                };
            }
        - input: "var x = 1;"
          output: "const x = 1;"
        - input: "let a: any = '';"
          output: "const a: undefined = '';"
      metadata:
        priority: high
        version: 1.0
      </rule>
    output: "Correctly formatted Cursor rule"