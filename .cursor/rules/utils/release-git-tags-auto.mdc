---
description: This rule checks for existing tags before creating new ones. It also offers to push the tag to the remote repository. It runs when users request release creation, version bumping, or package publishing.
globs: package.json, package-lock.json
alwaysApply: false
---
# Release Git Tag Management

## Critical Rules

- Must check for existing tags before creating new ones
- Must handle local and remote tag conflicts gracefully
- Must provide multiple resolution options for tag conflicts
- Must validate tag format and naming conventions
- Must offer to push tags to remote repository
- Must provide clear error messages and resolution steps

<rule>
name: release-git-tags-auto

filters:
  - type: content
    pattern: "(release|version|tag|bump|publish|deploy).*(create|make|generate|prepare|ready)"
  - type: git_branch
    pattern: "^(?!main$|master$).*$"
  - type: event
    pattern: "chat_start|chat_response"

actions:
  - type: generate
    content: |

    ## üè∑Ô∏è Git Tag Management Process
      
      I'll help you create and manage git tags for your release.
      
      1. **Offer Git Tag Creation**:
         ```bash
         echo "üè∑Ô∏è Would you like me to create a git tag for version $NEW_VERSION?"
         echo "This will create a tag that marks this exact point in your release."
         
         read -p "Create git tag v$NEW_VERSION? (y/N): " CREATE_TAG
         
         if [[ "$CREATE_TAG" =~ ^[Yy]$ ]]; then
           echo "üîÑ Creating git tag v$NEW_VERSION..."
           
           # Check if tag already exists
           if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
             echo "‚ùå ERROR: Git tag v$NEW_VERSION already exists!"
             echo ""
             echo "Existing tag details:"
             git show --no-patch --format="%H%n%an%n%ad%n%s" "v$NEW_VERSION" 2>/dev/null || echo "Tag exists but details unavailable"
             echo ""
             echo "Options:"
             echo "1. Use a different version number"
             echo "2. Delete the existing tag (if you're sure it's safe)"
             echo "3. Skip tag creation and create it manually later"
             echo ""
             read -p "Choose option (1-3): " TAG_CONFLICT_CHOICE
             
             case $TAG_CONFLICT_CHOICE in
               1)
                 echo "Please restart the release workflow with a different version number"
                 echo "‚ùå Release workflow terminated due to tag conflict"
                 exit 1
                 ;;
               2)
                 echo "‚ö†Ô∏è WARNING: You're about to delete an existing tag!"
                 echo "This action cannot be undone and may affect other developers."
                 read -p "Are you absolutely sure? Type 'DELETE' to confirm: " DELETE_CONFIRM
                 
                 if [[ "$DELETE_CONFIRM" == "DELETE" ]]; then
                   echo "üîÑ Deleting existing tag v$NEW_VERSION..."
                   git tag -d "v$NEW_VERSION"
                   
                   # Also delete from remote if it exists there
                   if git ls-remote --tags origin "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
                     echo "üîÑ Deleting remote tag v$NEW_VERSION..."
                     git push origin ":refs/tags/v$NEW_VERSION"
                   fi
                   
                   echo "‚úÖ Existing tag deleted successfully"
                 else
                   echo "‚ùå Tag deletion cancelled. Release workflow terminated"
                   exit 1
                 fi
                 ;;
               3)
                 echo "‚è≠Ô∏è Skipping tag creation due to conflict"
                 CREATE_TAG=""
                 ;;
               *)
                 echo "‚ùå Invalid choice. Release workflow terminated"
                 exit 1
                 ;;
             esac
           fi
           
           # Create the git tag (only if we didn't skip due to conflict)
           if [[ "$CREATE_TAG" =~ ^[Yy]$ ]]; then
             git tag v$NEW_VERSION
             echo "‚úÖ Git tag v$NEW_VERSION created successfully"
             
             # Offer to push the tag
             echo ""
             echo "üîÑ Would you like me to push the git tag to the remote repository?"
             echo "This makes the tag available to other developers and CI/CD systems."
             
             read -p "Push git tag v$NEW_VERSION? (y/N): " PUSH_TAG
             
             if [[ "$PUSH_TAG" =~ ^[Yy]$ ]]; then
               echo "üîÑ Pushing git tag v$NEW_VERSION..."
               
               # Check for remote tag conflicts before pushing
               if git ls-remote --tags origin "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
                 echo "‚ùå ERROR: Remote tag v$NEW_VERSION already exists!"
                 echo "The local tag was created, but cannot be pushed due to remote conflict."
                 echo ""
                 echo "Options:"
                 echo "1. Delete the remote tag first (requires appropriate permissions)"
                 echo "2. Keep the local tag only"
                 echo "3. Delete the local tag and skip"
                 echo ""
                 read -p "Choose option (1-3): " REMOTE_CONFLICT_CHOICE
                 
                 case $REMOTE_CONFLICT_CHOICE in
                   1)
                     echo "üîÑ Deleting remote tag v$NEW_VERSION..."
                     git push origin ":refs/tags/v$NEW_VERSION"
                     echo "üîÑ Now pushing local tag..."
                     git push origin v$NEW_VERSION
                     echo "‚úÖ Git tag v$NEW_VERSION pushed successfully"
                     ;;
                   2)
                     echo "‚è≠Ô∏è Keeping local tag only. You can push it later with: git push origin v$NEW_VERSION"
                     ;;
                   3)
                     echo "üîÑ Deleting local tag..."
                     git tag -d "v$NEW_VERSION"
                     echo "‚è≠Ô∏è Tag creation cancelled"
                     ;;
                   *)
                     echo "‚ùå Invalid choice. Keeping local tag only"
                     ;;
                 esac
               else
                 git push origin v$NEW_VERSION
                 echo "‚úÖ Git tag v$NEW_VERSION pushed successfully"
                 
                 echo ""
                 echo "üéâ Release tag is now live!"
                 echo "Tag URL: https://github.com/[USERNAME]/[REPO]/releases/tag/v$NEW_VERSION"
               fi
             else
               echo "‚è≠Ô∏è Tag created locally but not pushed"
               echo "You can push it later with: git push origin v$NEW_VERSION"
             fi
           fi
         else
           echo "‚è≠Ô∏è Skipping git tag creation"
           echo "You can create the tag manually later with: git tag v$NEW_VERSION"
         fi
         ```

examples:
  - input: |
      User: "Create a release"
      New version: 1.2.3
      Tag v1.2.3 already exists locally
    output: |
      ## üè∑Ô∏è Git Tag Management Process
      
      üè∑Ô∏è Would you like me to create a git tag for version 1.2.3?
      This will create a tag that marks this exact point in your release.
      
      Create git tag v1.2.3? (y/N): y
      üîÑ Creating git tag v1.2.3...
      
      ‚ùå ERROR: Git tag v1.2.3 already exists!
      
      Existing tag details:
      abc1234
      John Doe
      2024-01-15
      feat: add new feature
      
      Options:
      1. Use a different version number
      2. Delete the existing tag (if you're sure it's safe)
      3. Skip tag creation and create it manually later

  - input: |
      User: "Create a release"
      New version: 1.2.3
      Tag v1.2.3 doesn't exist
      User confirms tag creation and push
    output: |
      ## üè∑Ô∏è Git Tag Management Process
      
      üè∑Ô∏è Would you like me to create a git tag for version 1.2.3?
      This will create a tag that marks this exact point in your release.
      
      Create git tag v1.2.3? (y/N): y
      üîÑ Creating git tag v1.2.3...
      ‚úÖ Git tag v1.2.3 created successfully
      
      üîÑ Would you like me to push the git tag to the remote repository?
      This makes the tag available to other developers and CI/CD systems.
      
      Push git tag v1.2.3? (y/N): y
      üîÑ Pushing git tag v1.2.3...
      ‚úÖ Git tag v1.2.3 pushed successfully
      
      üéâ Release tag is now live!
      Tag URL: https://github.com/[USERNAME]/[REPO]/releases/tag/v1.2.3

tests:
  - input: "Create release with existing local tag"
    output: "Should show conflict error and provide resolution options"
  
  - input: "Create release with existing remote tag"
    output: "Should detect remote conflict and provide resolution options"
  
  - input: "Create release with new tag"
    output: "Should create tag successfully and offer to push"
  
  - input: "Create release but skip tag creation"
    output: "Should skip tag creation and provide manual instructions"

metadata:
  priority: high
  version: 1.0
</rule>
