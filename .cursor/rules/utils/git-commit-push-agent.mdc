---
description: This rule enforces Git commit standards and conventions while committing and pushing code in Agent Mode. This rule is crucial for keeping track of changes made by cursor agents, and should run whenever the user expresses they want to commit or push code changes made by the agent. This rule should be followed when: 1. the user wants to commit code, the git aliases, 'gpu' or 'gc', 'gcm' were submitted by the user. This rule will ask the user if they would prefer to autoRun the commit command going forward. All agents should adhere to the standards set out in this rule.
globs: .git/COMMIT_EDITMSG
alwaysApply: false
---
# Git Commit Standards

## Critical Rules

- All AI agents MUST follow this rule
- Use `git status` to check modified or staged files before committing
- Never overwrite or push unintended files
- Commits MUST follow the conventional-commit standard
- Always run `git add <filename>` from repo root
- Use present tense in commit subject ("add" not "added")
- Subject â‰¤ 72 chars, imperative mood, blank line before body
- Reference issue/ticket with # if used
- Describe what or why, not how changes were made; fixes must state what was fixed
- Include agent name in commit footer ("Commit written by <agent_name>")

### Commit Format
```
<type>(<scope>): <description> (#<issue-number>)

[optional body]

[optional footer]

Commit written by <agent_name>
```

- If agent not specified, use "cursor agent"
- Types: feat, fix, docs, style, refactor, perf, test, chore, ci, security

### Post-Commit Actions

- Do NOT include post-commit commands (e.g., `npm run lint`, `git push`) in commit message
- Suggest these actions separately after commit

### Agent Enforcement

- Always check `git status` before commit
- Never use generic messages ("update code", "commit changes")
- Identify change type per conventional commit
- Commit body should be concise and brief, and should not exceed 50 words
- Use meaningful scope (codebase area)
- Clear, concise, imperative subject
- Add agent name as author
- Convert user commit instructions to proper format
- If user types "commit"/"gcm", prompt or infer proper message

<rule>
name: git-commit
version: 1.0
description: Enforces conventional commit standards for all agent commits and pushes. Invoked on commit/push requests or git aliases (gc, gcm, gpu). Prompts for or infers proper message if user input is vague.
filters:
  - type: file_extension
    pattern: "COMMIT_EDITMSG$"
  - type: event
    pattern: "(pre_commit|post_commit)"
  - type: content
    pattern: "(commit|push|gc|gcm|gpu)"

examples:
  - input: |
      added new feature
    output: |
      feat(api): add user authentication endpoint (#123)

      Implement JWT-based authentication for user login
      
      Breaking change: requires new environment variables for JWT secret

      Commit written by KawaiiSamurai
  - input: |
      fixing bug
    output: |
      fix(database): resolve connection timeout issue (#456)
      
      - Increase connection timeout to 30s
      - Add connection retry logic

      Commit written by SageDaddy
  - input: |
      update docs
    output: |
      docs(readme): update installation instructions (#789)
      
      Make setup steps clearer for new contributors

      Commit written by Spellchuck

tests:
  - input: "updated code"
    output: "feat(core): update code processing logic (#567)\n\nCommit written by BasicBitchDeveloper"
  - input: "fix error"
    output: "fix(validation): resolve input sanitization error (#890)\n\nCommit written by ThirstySimp"
  - input: "add docs"
    output: "docs(api): add OpenAPI documentation (#345)\n\nCommit written by Spellchuck"
  - input: "commit"
    output: "When the user simply types 'commit', the agent must:\n1. Check git status\n2. Determine the appropriate type and scope based on changed files\n3. Generate a proper conventional commit message\n4. Present it to the user for approval (post-commit actions are suggested separately)"

metadata:
  priority: high
  version: 1.0
</rule> 