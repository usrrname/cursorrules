---
description: This rule generates comprehensive release notes by analyzing the git diff between the previous tag and the latest commit on the main branch and creates a structured markdown file.
globs: release-notes-*.md
alwaysApply: false
---
# Release Notes Generator

This rule generates comprehensive release notes by analyzing the git diff between the previous tag and the latest commit, and provides version bumping options based on semantic versioning.

## Critical Rules

- Must identify the most recent git tag as the baseline for comparison
- Must analyze commit messages, file changes, and code modifications
- Must categorize changes into Features, Bug Fixes, Breaking Changes, and Other
- Must provide a structured summary suitable for release documentation
- Must handle cases where no previous tags exist
- Must exclude merge commits and focus on meaningful changes
- Must link features and changes to their corresponding commits or PRs
- Must provide version bumping options (major, minor, patch) based on semantic versioning
- Must suggest appropriate version bump based on change analysis

<rule>
name: generate-release-notes
description: Analyzes git history and generates structured release notes from the previous tag to HEAD with version bumping

actions:
  - type: generate
    content: |
      ## Release Notes Generation Process
      
      1. **Identify Current Version**:
         ```bash
         # Read current version from package.json
         CURRENT_VERSION=$(node -p "require('./package.json').version")
         
         # Get the most recent git tag (if exists)
         LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v$CURRENT_VERSION")
         
         echo "Current package.json version: $CURRENT_VERSION"
         echo "Latest git tag: $LATEST_TAG"
         ```
      
      2. **Check User Request for Version Bump**:
         ```bash
         # Check if user specified version bump in their request
         if [[ "$USER_REQUEST" == *"major"* ]] || [[ "$USER_REQUEST" == *"Major"* ]]; then
           VERSION_BUMP="major"
           echo "User requested major version bump"
         elif [[ "$USER_REQUEST" == *"minor"* ]] || [[ "$USER_REQUEST" == *"Minor"* ]]; then
           VERSION_BUMP="minor"
           echo "User requested minor version bump"
         elif [[ "$USER_REQUEST" == *"patch"* ]] || [[ "$USER_REQUEST" == *"Patch"* ]]; then
           VERSION_BUMP="patch"
           echo "User requested patch version bump"
         else
           VERSION_BUMP=""
           echo "No version bump specified by user"
         fi
         ```
      
      3. **Prompt User for Version Bump (if not specified)**:
         ```bash
         if [ -z "$VERSION_BUMP" ]; then
           # Calculate potential new versions
           MAJOR_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1 ".0.0"}')
           MINOR_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1 "." $2+1 ".0"}')
           PATCH_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1 "." $2 "." $3+1}')
           
           echo "Choose your version bump:"
           echo "1) Major version: $CURRENT_VERSION ‚Üí $MAJOR_VERSION (breaking changes)"
           echo "2) Minor version: $CURRENT_VERSION ‚Üí $MINOR_VERSION (new features)"
           echo "3) Patch version: $CURRENT_VERSION ‚Üí $PATCH_VERSION (bug fixes)"
           echo "4) Custom version"
           
           # Wait for user input
           read -p "Enter your choice (1-4): " USER_CHOICE
           
           case $USER_CHOICE in
             1) VERSION_BUMP="major" ;;
             2) VERSION_BUMP="minor" ;;
             3) VERSION_BUMP="patch" ;;
             4) 
               read -p "Enter custom version: " CUSTOM_VERSION
               VERSION_BUMP="custom"
               ;;
           esac
         fi
         ```
      
      4. **Analyze Changes for Guidance**:
         - **Major Version (X.0.0)**: Breaking changes, major API changes, incompatible changes
         - **Minor Version (0.X.0)**: New features, enhancements, backward-compatible additions
         - **Patch Version (0.0.X)**: Bug fixes, documentation, minor improvements
         
         ```bash
         # Get all commits since that tag with full details
         git log --oneline --no-merges $LATEST_TAG..HEAD
         ```
      
      5. **Determine Version Bump Type**:
         - Check for `BREAKING:` in commit messages ‚Üí Suggest Major bump
         - Check for `feat:` commits ‚Üí Suggest Minor bump (unless breaking changes exist)
         - Check for `fix:` commits ‚Üí Suggest Patch bump (unless features or breaking changes exist)
         - Default to patch bump for documentation and other changes
         
         # Provide guidance if user choice doesn't match analysis
         if [ "$VERSION_BUMP" != "custom" ]; then
           echo "Analysis suggests: $SUGGESTED_BUMP"
           if [ "$VERSION_BUMP" != "$SUGGESTED_BUMP" ]; then
             echo "Note: Your choice ($VERSION_BUMP) differs from suggested ($SUGGESTED_BUMP)"
             echo "Consider reviewing the changes before proceeding"
           fi
         fi
      
      6. **Generate Structured Output**:
         ```markdown
         # What's Changed in [PACKAGE_NAME] v[NEW_VERSION]
         
         **Release Date**: [DATE]
         **Previous Version**: [PREVIOUS_VERSION]
         **Version Bump**: [MAJOR|MINOR|PATCH] - [REASON]
         
         ## üöÄ New Features
         - **[Feature Name]** ([commit-hash](link-to-commit)) - [Description]
         - **[Feature Name]** ([#PR-number](link-to-PR)) - [Description]
         
         ## üêõ Bug Fixes  
         - **[Bug Description]** ([commit-hash](link-to-commit)) - [Fix details]
         - **[Bug Description]** ([#PR-number](link-to-PR)) - [Fix details]
         
         ## üí• Breaking Changes
         - **[Change Description]** ([commit-hash](link-to-commit)) - [Migration notes]
         - **[Change Description]** ([#PR-number](link-to-PR)) - [Migration notes]
         
         ## üìö Documentation
         - **[Doc Update]** ([commit-hash](link-to-commit)) - [Description]
         - **[Doc Update]** ([#PR-number](link-to-PR)) - [Description]
         
         ## üîß Other Changes
         - **[Change Description]** ([commit-hash](link-to-commit)) - [Details]
         - **[Change Description]** ([#PR-number](link-to-PR)) - [Details]
         
         ## üìã Version Update Commands
         
         After reviewing the changes, update your version:
         
         ```bash
         # Update package.json version
         npm version [major|minor|patch] --no-git-tag
         
         # Or manually edit package.json
         # "version": "[NEW_VERSION]"
         
         # Create git tag
         git tag v[NEW_VERSION]
         git push origin v[NEW_VERSION]
         ```
         ```

examples:
  - input: |
      User: "Generate release notes with minor version bump"
      
      Current package.json version: 1.2.3
      Latest git tag: v1.2.3
      User specified: minor version bump
      
      Git log output:
      - feat: add user authentication system (#123)
      - fix: resolve memory leak in data processing (abc1234)
      - docs: update API documentation (#124)
      - BREAKING: remove deprecated v1 endpoints (def5678)
      - refactor: optimize database queries (ghi9012)
    output: |
      # What's Changed in cursorrules v1.3.0
      
      **Release Date**: December 19, 2024
      **Previous Version**: 1.2.3
      **Version Bump**: MINOR - User requested minor version bump (Note: Analysis suggests MAJOR due to breaking changes)
      
      ## üöÄ New Features
      - **User Authentication System** ([#123](link-to-PR)) - Added comprehensive authentication with JWT tokens, password reset, and session management
      
      ## üêõ Bug Fixes
      - **Memory Leak Fix** ([abc1234](link-to-commit)) - Resolved critical memory leak in data processing module that could cause performance degradation over time
      
      ## üí• Breaking Changes
      - **API v1 Deprecation** ([def5678](link-to-commit)) - Removed deprecated v1 endpoints. Please migrate to v2 API endpoints. See migration guide in documentation.
      
      ## üìö Documentation
      - **API Documentation Update** ([#124](link-to-PR)) - Updated API documentation with new authentication endpoints and examples
      
      ## üîß Other Changes
      - **Database Query Optimization** ([ghi9012](link-to-commit)) - Optimized database queries for improved performance
      
      ## üìã Version Update Commands
      
      After reviewing the changes, update your version:
      
      ```bash
      # Update package.json version
      npm version minor --no-git-tag
      
      # Or manually edit package.json
      # "version": "1.3.0"
      
      # Create git tag
      git tag v1.3.0
      git push origin v1.3.0
      ```

  - input: |
      User: "Generate release notes"
      
      Current package.json version: 1.2.3
      Latest git tag: v1.2.3
      User specified: No version bump specified
      
      Git log output:
      - feat: add dark mode support (#125)
      - feat: implement user preferences (abc5678)
      - fix: resolve login button alignment (def9012)
      - docs: update user guide (ghi3456)
    output: |
      Current package.json version: 1.2.3
      Latest git tag: v1.2.3
      
      Choose your version bump:
      1) Major version: 1.2.3 ‚Üí 2.0.0 (breaking changes)
      2) Minor version: 1.2.3 ‚Üí 1.3.0 (new features)
      3) Patch version: 1.2.3 ‚Üí 1.2.4 (bug fixes)
      4) Custom version
      
      Enter your choice (1-4): 2
      
      Analysis suggests: minor
      
      # What's Changed in cursorrules v1.3.0
      
      **Release Date**: December 19, 2024
      **Previous Version**: 1.2.3
      **Version Bump**: MINOR - New features added (dark mode, user preferences)
      
      ## üöÄ New Features
      - **Dark Mode Support** ([#125](link-to-PR)) - Added comprehensive dark mode theme with automatic system preference detection
      - **User Preferences** ([abc5678](link-to-commit)) - Implemented user preference system for customizable interface options
      
      ## üêõ Bug Fixes
      - **Login Button Alignment** ([def9012](link-to-commit)) - Fixed misaligned login button in authentication form
      
      ## üìö Documentation
      - **User Guide Update** ([ghi3456](link-to-commit)) - Updated user guide with new features and improved navigation
      
      ## üìã Version Update Commands
      
      After reviewing the changes, update your version:
      
      ```bash
      # Update package.json version
      npm version minor --no-git-tag
      
      # Or manually edit package.json
      # "version": "1.3.0"
      
      # Create git tag
      git tag v1.3.0
      git push origin v1.3.0
      ```

  - input: |
      User: "Generate release notes with major version bump"
      
      Current package.json version: 1.2.3
      Latest git tag: v1.2.3
      User specified: major version bump
      
      Git log output:
      - feat: add user authentication system (#123)
      - fix: resolve memory leak in data processing (abc1234)
      - BREAKING: remove deprecated v1 endpoints (def5678)
    output: |
      # What's Changed in cursorrules v2.0.0
      
      **Release Date**: December 19, 2024
      **Previous Version**: 1.2.3
      **Version Bump**: MAJOR - User requested major version bump (Analysis confirms: breaking changes detected)
      
      ## üöÄ New Features
      - **User Authentication System** ([#123](link-to-PR)) - Added comprehensive authentication with JWT tokens, password reset, and session management
      
      ## üêõ Bug Fixes
      - **Memory Leak Fix** ([abc1234](link-to-commit)) - Resolved critical memory leak in data processing module that could cause performance degradation over time
      
      ## üí• Breaking Changes
      - **API v1 Deprecation** ([def5678](link-to-commit)) - Removed deprecated v1 endpoints. Please migrate to v2 API endpoints. See migration guide in documentation.
      
      ## üìã Version Update Commands
      
      After reviewing the changes, update your version:
      
      ```bash
      # Update package.json version
      npm version major --no-git-tag
      
      # Or manually edit package.json
      # "version": "2.0.0"
      
      # Create git tag
      git tag v2.0.0
      git push origin v2.0.0
      ```

tests:
  - input: "Generate release notes for version bump from v0.1.2.3 to v0.1.3"
    output: "Should analyze commits between v0.1.2.3 and HEAD, categorize changes with commit/PR links, suggest appropriate version bump, and produce structured release notes"
  
  - input: "No previous git tags exist"
    output: "Should analyze all commits from initial commit to HEAD and generate comprehensive first release notes with proper linking and version 1.0.0 suggestion"
  
  - input: "Only merge commits since last tag"
    output: "Should identify that no meaningful changes were made and suggest no release is needed"
  
  - input: "Breaking changes detected in commits"
    output: "Should recommend major version bump and highlight breaking changes prominently"
  
  - input: "Generate release notes with major version bump"
    output: "Should detect user-specified major version bump, proceed with major version, and note any analysis conflicts"
  
  - input: "Generate release notes with minor version bump"
    output: "Should detect user-specified minor version bump, proceed with minor version, and note any analysis conflicts"
  
  - input: "Generate release notes with patch version bump"
    output: "Should detect user-specified patch version bump, proceed with patch version, and note any analysis conflicts"
  
  - input: "Generate release notes (no version specified)"
    output: "Should prompt user for version bump choice, show options, wait for input, and proceed with chosen version"

metadata:
  priority: medium
  version: 1.0
</rule>

## Usage Instructions

1. **Manual Trigger**: This rule must be manually invoked when you're ready to generate release notes
2. **Version Bump Detection**: The rule automatically detects if you specify a version bump in your request (e.g., "with major version bump")
3. **Interactive Prompting**: If no version bump is specified, the rule will prompt you to choose between major, minor, patch, or custom version
4. **Prerequisites**: Ensure your repository has proper git tags for version tracking
5. **Conventional Commits**: Works best with conventional commit message format (feat:, fix:, docs:, etc.)
6. **Commit Linking**: Automatically links features and changes to their corresponding commits or PRs
7. **Version Bumping**: Provides semantic versioning recommendations based on change analysis
8. **Analysis Guidance**: Compares your choice with the suggested version bump and provides guidance if they differ
9. **Review Required**: Always review and edit the generated release notes before publishing

## Semantic Versioning Guidelines

- **Major Version (X.0.0)**: Breaking changes, incompatible API changes
- **Minor Version (0.X.0)**: New features, backward-compatible additions
- **Patch Version (0.0.X)**: Bug fixes, documentation, minor improvements

## Integration with Existing Workflow

This rule is designed to work with your existing release process, as evidenced by files like `RELEASE_NOTES_v0.1.2.3_to_v0.1.3.md` in your repository. It will generate structured content that can be:

- Saved to a new release notes file
- Used in GitHub/GitLab releases
- Included in changelog documentation
- Shared with stakeholders

## Quality Assurance

The rule includes validation to ensure:
- All significant changes are captured
- Breaking changes are clearly highlighted
- Migration guidance is provided where needed
- Each change is properly linked to its source commit or PR
- Version bump recommendations follow semantic versioning principles
