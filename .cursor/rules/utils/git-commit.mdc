---
description: This rule enforces Git commit standards and conventions while committing and pushing code in Agent Mode. This rule is crucial for keeping track of changes made by cursor agents, and should run whenever the user expresses they want to commit or push code changes made by the agent. This rule should be followed when: 1. the user wants to commit code, the git aliases, 'gpu' or 'gc', 'gcm' were submitted by the user. This rule will ask the user if they would prefer to autoRun the commit command going forward. All agents should adhere to the standards set out in this rule.
globs: .git/COMMIT_EDITMSG
alwaysApply: false
---
# Git Commit Standards

## Critical Rules
- This rule MUST be followed by ALL AI agents without exception
- This rule should use `git status` to check what files are currently modified and/or staged so as not to:
  - overwrite files
  - push unintended files or changes to remote repository
- Commits in Agent mode MUST follow the conventional-commit standard defined below
- Always run `git add <filename>` from repository root when asked to commit code.
- The committed files may be added from Cursor context.
- Commits should use present tense ("add" not "added")
- First line should not exceed 72 characters
- Reference GitHub issue or ticket number with # if there is a ticketing system used.
- Describe what and why, not how
- Fixes should describe what error or problem was fixed or what behaviour no longer happens
- Separate subject from body with blank line
- Use imperative mood in subject line
- Include the name of the specific custom agent (e.g. "Commit written by Spellchuck") at the end of commit

### Commit Format

The format of the commit MUST be as follows (NO EXCEPTIONS): 

  ```
  <type>(<scope>): <description> (#<issue-number>)

  [optional body]

  [optional footer]

  Commit written by <agent_name>
  ```
  If the user didn't specify any particular agent, the commit will just say it is written by "cursor agent"

  The commit type must be one of:
    - feat: A new feature
    - fix: A bug fix
    - docs: Documentation only changes
    - style: Changes that don't affect the meaning of the code
    - refactor: A code change that neither fixes a bug nor adds a feature
    - perf: A code change that improves performance
    - test: Adding missing tests or correcting existing tests
    - chore: Changes to the build process or auxiliary tools
    - ci: Changes to CI configuration files and scripts
    - security: Changes made to codebase due to security threats or prevention of malicious attacks

### Post-Commit Actions

Post-commit actions (such as `npm run lint` or `git push origin <branch>`) are **not** to be included in the commit message text. These are commands intended to be run after the user approves the commit and wants to push the commit to the remote branch. The agent should suggest these actions separately after a successful commit.

### AI Agent Enforcement

All AI agents must:
1. Always check for existing changed files via `git status` before committing
2. Never use generic commit messages like "update code" or "commit changes"
3. Always identify the type of change according to conventional commit standards
4. Include a meaningful scope that indicates which part of the codebase is affected
5. Provide a clear, concise description in the imperative mood
6. Add their agent name as the author in the commit footer
7. Convert user instructions for commits into proper conventional commit format automatically
8. If a user types simply "commit" or "gcm", the agent must prompt for or infer the appropriate conventional commit content

<rule>
name: git-commit
description: This rule is crucial for keeping track of changes made by cursor agents, and should run whenever the user expresses they want to commit or push code changes made by the agent. It should also accept being invoked by the git aliases, "gpu" or "gc", "gcm" while asking the user if they would prefer to autoRun the command going forward.
version: 1.0
filters:
  - type: file_extension
    pattern: "COMMIT_EDITMSG$"
  - type: event
    pattern: "(pre_commit|post_commit)"
  - type: content
    pattern: "(commit|push|gc|gcm|gpu)"
  
examples:
  - input: |
      added new feature
    output: |
      feat(api): add user authentication endpoint (#123)

      Implement JWT-based authentication for user login
      
      Breaking change: requires new environment variables for JWT secret

      Commit written by KawaiiSamurai

    # Post-commit actions (not included in commit message):
    # npm run lint && git push origin feature/auth
  - input: |
      fixing bug
    output: |
      fix(database): resolve connection timeout issue (#456)
      
      - Increase connection timeout to 30s
      - Add connection retry logic

      Commit written by SageDaddy

    # Post-commit actions (not included in commit message):
    # npm run lint && git push origin fix/timeout
  - input: |
      update docs
    output: |
      docs(readme): update installation instructions (#789)
      
      Make setup steps clearer for new contributors

      Commit written by Spellchuck

    # Post-commit actions (not included in commit message):
    # npm run lint && git push origin docs/readme-update

tests:
  - input: "updated code"
    output: "feat(core): update code processing logic (#567)\n\nCommit written by BasicBitchDeveloper"
  - input: "fix error"
    output: "fix(validation): resolve input sanitization error (#890)\n\nCommit written by ThirstySimp"
  - input: "add docs"
    output: "docs(api): add OpenAPI documentation (#345)\n\nCommit written by Spellchuck"
  - input: "commit"
    output: "When the user simply types 'commit', the agent must:\n1. Check git status\n2. Determine the appropriate type and scope based on changed files\n3. Generate a proper conventional commit message\n4. Present it to the user for approval (post-commit actions are suggested separately)"

metadata:
  priority: high
  version: 1.0
</rule> 