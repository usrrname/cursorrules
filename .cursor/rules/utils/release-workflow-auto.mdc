---
description: This rule prepares for a package release through a series of user preferences: creating a release branch, generate release notes, creating or updating the changelog.md file, and updating the package.json version. It analyzes the git diff between the previous tag and the latest commit, and provides version bumping options based on semantic versioning.
globs: release-notes-*.md, changelog.md, release-workflow-sequence.md
alwaysApply: false
---
# Release Workflow

## Critical Rules

- Must only trigger when user asks to create a release (release, version, tag, etc.)
- Must coordinate with specialized release rules for validation, analysis, versioning, and tag management
- Must provide structured release notes and documentation
- Must ensure changelog follows Keep a Changelog format standards
- Must offer to create a git tag for the new version
- Must offer to automatically update package.json version property
- Must offer to commit version changes with appropriate commit message
- Must provide clear confirmation prompts before making changes
- Must update release-workflow-sequence.md to reflect any changes to this workflow rule
- Must ensure sequence diagram accurately represents current workflow implementation and failure points

<rule>
name: release-workflow-auto

filters:
  - type: content
    pattern: "(release|version|tag|bump|publish|deploy).*(create|make|generate|prepare|ready)"
  - type: git_branch
    pattern: "^(?!main$|master$).*$"
  - type: event
    pattern: "chat_start|chat_response"

actions:
  - type: validate
    conditions:
      - pattern: "^(main|master)$"
        message: "⚠️ You're currently on the main branch! Please create a release branch before generating release notes. This ensures proper version control and prevents accidental releases."
  
  - type: generate
    content: |

    ## 🚀 Release Workflow Process
      
      I'll help you create comprehensive release notes, update the changelog, and handle version bumping! Let me coordinate the specialized release processes.
      
      1. **Release Validation** ✅
         ```bash
         # Call release-validation-auto rule for branch and package.json validation
         echo "🔍 Running release validation..."
         # This rule validates:
         # - Branch naming conventions (release/, hotfix/, fix/)
         # - Package.json existence and validity
         # - Required fields (name, version)
         # - Semantic versioning format
         ```
      
      2. **Commit Analysis** 📊
         ```bash
         # Call release-commit-analysis-auto rule for intelligent commit analysis
         echo "📊 Analyzing commits for version bump guidance..."
         # This rule analyzes:
         # - Conventional commits (feat:, fix:, BREAKING:, etc.)
         # - Non-conventional commits with intelligent categorization
         # - File changes to help categorize documentation commits
         # - Comprehensive change summaries
         ```
      
      3. **Version Bump Management** 🔄
         ```bash
         # Call release-version-bump-auto rule for version bump validation
         echo "🔄 Managing version bump selection and validation..."
         # This rule handles:
         # - User version bump requests
         # - Version bump validation against change analysis
         # - Critical error handling for version mismatches
         # - Force continue options for edge cases
         ```
      
      4. **Generate Structured Release Notes**:
         ```bash
         RELEASE_DATE=$(date +%Y-%m-%d)
         ```
         ```markdown
         # What's Changed in [PACKAGE_NAME] v[NEW_VERSION]
         
         **Release Date**: [RELEASE_DATE]
         **Previous Version**: [PREVIOUS_VERSION]
         **Version Bump**: [MAJOR|MINOR|PATCH] - [REASON]
         **Branch**: [CURRENT_BRANCH]
         
         ## 🚀 New Features
         - **[Feature Name]** ([commit-hash](link-to-commit)) - [Description]
         - **[Feature Name]** ([#PR-number](link-to-PR)) - [Description]
         
         ## 🐛 Bug Fixes  
         - **[Bug Description]** ([commit-hash](link-to-commit)) - [Fix details]
         - **[Bug Description]** ([#PR-number](link-to-PR)) - [Fix details]
         
         ## 💥 Breaking Changes
         - **[Change Description]** ([commit-hash](link-to-commit)) - [Migration notes]
         - **[Change Description]** ([#PR-number](link-to-PR)) - [Migration notes]
         
         ## 📚 Documentation
         - **[Doc Update]** ([commit-hash](link-to-commit)) - [Description]
         - **[Doc Update]** ([#PR-number](link-to-PR)) - [Description]
         
         ## 🔧 Other Changes
         - **[Change Description]** ([commit-hash](link-to-commit)) - [Details]
         - **[Change Description]** ([#PR-number](link-to-PR)) - [Details]
         ```
      
      5. **Changelog Generation** 📝
         ```bash
         # Call release-changelog-auto rule for changelog validation and generation
         echo "📝 Generating comprehensive changelog..."
         # This rule:
         # - Validates changelog generation environment
         # - Backs up existing changelog.md if it exists
         # - Calls changelog-generator-manual rule for actual generation
         # - Preserves existing content when possible
         ```
      
      6. **Package Version Management** 🔄
         ```bash
         # Call release-package-version-auto rule for version updates
         echo "🔄 Managing package.json version updates..."
         # This rule handles:
         # - Automatic package.json version updates
         # - Version calculation based on semantic versioning
         # - Custom version input handling
         # - Version commit and push management
         ```
      
      7. **Git Tag Management** 🏷️
         ```bash
         # Call release-git-tags-auto rule for tag creation and management
         echo "🏷️ Managing git tag creation and conflicts..."
         # This rule handles:
         # - Tag existence validation
         # - Local and remote tag conflict resolution
         # - Tag creation and pushing
         # - Multiple resolution options for conflicts
         ```
      
      8. **Final Release Instructions** 📋
         ```bash
         echo ""
         echo "🎉 Release preparation complete!"
         echo ""
         echo "📋 Next steps:"
         echo "1. Review the generated release notes"
         echo "2. Review the updated changelog.md"
         echo "3. Create a PR against main with your feature branch"
         echo "Once the PR is merged, the publishing Github Actions workflow will be triggered."
         echo ""
         echo "📁 Generated files:"
         echo "- Release notes: RELEASE_NOTES_v$CURRENT_VERSION_to_v$NEW_VERSION.md"
         echo "- Changelog: changelog.md"
         echo ""
         echo "🔗 Useful links:"
         echo "- Changelog: ./changelog.md"
         echo ""
         echo "🎯 Release workflow summary:"
         echo "- Branch: $CURRENT_BRANCH"
         echo "- Version bump: $CURRENT_VERSION → $NEW_VERSION ($VERSION_BUMP)"
         echo "- Changes analyzed: $(echo "$COMMITS" | wc -l | tr -d ' ') commits"
         echo "- Breaking changes: $BREAKING_COUNT"
         echo "- New features: $FEAT_COUNT"
         echo "- Bug fixes: $FIX_COUNT"
         ```

examples:
  - input: |
      User: "Create a release with minor version bump"
      Current branch: release/v1.3.0
      Git analysis: 3 feat commits, 1 fix commit, 2 docs commits
      Current version: 1.2.3
    output: |
      ## 🚀 Release Workflow Process
      
      I'll help you create comprehensive release notes, update the changelog, and handle version bumping! Let me coordinate the specialized release processes.
      
      1. **Release Validation** ✅
         🔍 Running release validation...
         ✅ Branch validation passed - using release/v1.3.0
         ✅ Package.json validation passed
         Package name: my-package
         Current version: 1.2.3
         Latest git tag: v1.2.3
      
      2. **Commit Analysis** 📊
         📊 Analyzing commits for version bump guidance...
         🔍 Found non-conventional commits, analyzing content for categorization...
         📈 Commit analysis summary:
           - Breaking changes: 0
           - New features: 3
           - Bug fixes: 1
           - Documentation: 2
           - Suggested version bump: minor
      
      3. **Version Bump Management** 🔄
         🔄 Managing version bump selection and validation...
         User requested minor version bump
         ✅ Version bump validation passed
      
      4. **Generate Structured Release Notes**:
         # What's Changed in my-package v1.3.0
         
         **Release Date**: 2024-01-15
         **Previous Version**: 1.2.3
         **Version Bump**: MINOR - New features added
         **Branch**: release/v1.3.0
         
         ## 🚀 New Features
         - **Add user authentication system** ([a1b2c3d](link-to-commit)) - Implemented JWT-based authentication
         - **Add dark mode support** ([e4f5g6h](link-to-commit)) - Added theme switching functionality
         - **Add search functionality** ([i7j8k9l](link-to-commit)) - Implemented global search with filters
         
         ## 🐛 Bug Fixes  
         - **Fix memory leak in data processing** ([m1n2o3p](link-to-commit)) - Resolved issue with large dataset handling
         
         ## 📚 Documentation
         - **Update API documentation** ([q4r5s6t](link-to-commit)) - Added comprehensive API examples
         - **Update README with setup instructions** ([u7v8w9x](link-to-commit)) - Improved installation guide
      
      5. **Changelog Generation** 📝
         📝 Generating comprehensive changelog...
         📋 Backed up existing changelog.md
         ✅ Existing changelog has proper structure, will preserve content
         🔄 Calling changelog generator...
         ✅ Changelog generated successfully at ./changelog.md
      
      6. **Package Version Management** 🔄
         🔄 Managing package.json version updates...
         🔄 Would you like me to automatically update the version in package.json?
         Current version: 1.2.3
         New version would be: 1.3.0
         Update package.json version? (y/N): y
         ✅ Updated package.json version to 1.3.0
      
      7. **Git Tag Management** 🏷️
         🏷️ Managing git tag creation and conflicts...
         🏷️ Would you like me to create a git tag for version 1.3.0?
         Create git tag v1.3.0? (y/N): y
         ✅ Git tag v1.3.0 created successfully
      
      8. **Final Release Instructions** 📋
         🎉 Release preparation complete!
         
         📋 Next steps:
         1. Review the generated release notes
         2. Review the updated changelog.md
         3. Create a PR against main with your feature branch

  - input: |
      User: "Create a release"
      Current branch: wip/experimental-feature
      Git analysis: 2 feat commits, 1 fix commit
      Current version: 1.0.0
    output: |
      ## 🚀 Release Workflow Process
      
      I'll help you create comprehensive release notes, update the changelog, and handle version bumping! Let me coordinate the specialized release processes.
      
      1. **Release Validation** ✅
         🔍 Running release validation...
         ❌ ERROR: Releases can only be created from branches that start with 'release/', 'hotfix/', or 'fix/'
         
         Current branch: wip/experimental-feature
         
         Please create an appropriate branch first:
         git checkout -b release/v[VERSION]
         
         ❌ Release workflow terminated due to invalid branch

tests:
  - input: "Create release on main branch"
    output: "Should show error and suggest creating release branch"
  
  - input: "Create release on invalid branch name"
    output: "Should show error and list valid branch patterns"
  
  - input: "Create release with missing package.json"
    output: "Should show error about missing package.json"
  
  - input: "Create release with breaking changes but minor version"
    output: "Should show critical error and offer force continue option"
  
  - input: "Create release with existing tag"
    output: "Should show tag conflict error and provide resolution options"

metadata:
  priority: high
  version: 1.0
</rule>